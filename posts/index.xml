<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jian Zhang</title><link>https://zz-jason.github.io/posts/</link><description>Recent content in Posts on Jian Zhang</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zz-jason.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>[VLDB 2023] Scalable and Robust Snapshot Isolation for High-Performance Storage Engines</title><link>https://zz-jason.github.io/posts/vldb-2023-scalable-and-robust-si/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://zz-jason.github.io/posts/vldb-2023-scalable-and-robust-si/</guid><description>简介 这篇论文提出了一种能够避免 long-running OLAP query 影响 OLTP 事务、在多核 CPU 上 scale、支持 out-of-memory workload 的 MVCC 实现机制。 长时间运行的 OLAP 查询会严重影响 OLTP 事务延迟。例如上图</description></item><item><title>[VLDB 2023] Scalable and Robust Latches for Database Systems</title><link>https://zz-jason.github.io/posts/vldb-2023-scalable-and-robust-latches/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><guid>https://zz-jason.github.io/posts/vldb-2023-scalable-and-robust-latches/</guid><description>Introduction 虽然编程语言和各类库中有许多不同的锁实现，但是却没有人详细研究过什么样的锁适用于数据库的工作负载，主要原因是数据库的工作负载范围很广，有 write-heavy</description></item><item><title>[SIGMOD 2020] Rethinking Logging, Checkpoints, and Recovery for High-Performance Storage Engines</title><link>https://zz-jason.github.io/posts/sigmod-2020-rethink-log-checkpoint-recover/</link><pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate><guid>https://zz-jason.github.io/posts/sigmod-2020-rethink-log-checkpoint-recover/</guid><description>简介 基于磁盘的 DBMS 通常采用 ARIES 风格的日志恢复机制，它可以处理超过内存的数据和事务，可以在多次崩溃的情况下快速恢复，支持 fuzzy checkpoint 等。然而，ARIES 的</description></item><item><title>[VLDB 2022] Memory-Optimized Multi-Version Concurrency Control for Disk-Based Database Systems</title><link>https://zz-jason.github.io/posts/vldb-2022-memory-opotimized-mvcc/</link><pubDate>Fri, 07 Apr 2023 00:00:00 +0000</pubDate><guid>https://zz-jason.github.io/posts/vldb-2022-memory-opotimized-mvcc/</guid><description>简介 这篇论文主要讲了 Umbra（TUM 实现的 larger-than-RAM 数据库）的高性能 MVCC 实现。作者将事务分为两类，一类是数据修改量不大可以在内存中完成的常规事务，一</description></item><item><title>[ICDE 2018] LeanStore: In-Memory Data Management Beyond Main Memory</title><link>https://zz-jason.github.io/posts/icde-2018-leanstore/</link><pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate><guid>https://zz-jason.github.io/posts/icde-2018-leanstore/</guid><description>Introduction Buffer Manager 和 B+ Tree 在 In-Memory 的负载上有很多性能瓶颈，比如将 Page ID 转换成内存指针的 Hash Table 和它对应的全局 Latch，比如访问 B+ Tree 的每个内存节点时需要获取的 Latch 等。</description></item><item><title>[CIDR 2020] Umbra: A Disk-Based System with In-Memory Performance</title><link>https://zz-jason.github.io/posts/cidr-2020-umbra/</link><pubDate>Sat, 01 Apr 2023 08:00:00 +0000</pubDate><guid>https://zz-jason.github.io/posts/cidr-2020-umbra/</guid><description>简介 这篇论文介绍了 TUM 的通用数据库 Umbra，它基于 SSD，能高效处理任意大小的数据集，是内存数据库 HyPer 的继任者。Umbra 的关键实现包括：不定</description></item><item><title>[CIDR 2022] Are You Sure You Want to Use MMAP in Your Database Management System?</title><link>https://zz-jason.github.io/posts/cidr-2022-mmap-problems/</link><pubDate>Fri, 31 Mar 2023 08:00:00 +0000</pubDate><guid>https://zz-jason.github.io/posts/cidr-2022-mmap-problems/</guid><description>依稀记得 CMU 有篇 paper 讲了使用 mmap 的各种问题，好奇之前大家使用 mmap 过程中遇到了哪些问题，于是抽空读了这篇论文，加深了我对数据存储、文件 IO 的理解。 Background MMAP Overview</description></item><item><title>Essential Readings on Database Storage</title><link>https://zz-jason.github.io/posts/readings-storage.md/</link><pubDate>Fri, 10 Mar 2023 17:00:00 +0800</pubDate><guid>https://zz-jason.github.io/posts/readings-storage.md/</guid><description>Disk I/O Managing Non-Volatile Memory in Database Systems, 2018, SIGMOD Design Tradeoffs of Data Access Methods, 2016, SIGMOD Designing Access Methods: The RUM Conjecture, 2016, EDBT The Five Minute Rule 20 Years Later and How Flash Memory Changes the Rules, 2008, ACM Queue The 5 Minute Rule for Trading Memory for Disc Accesses and the 5 Byte Rule for Trading Memory for CPU Time, 1987, SIGMOD B Tree Families Efficient Locking for Concurrent Operations on B-Trees, 1981, TODS The Ubiquitous B-Tree, 1979 Buffer Management Virtual-Memory Assisted Buffer Management, 2023, SIGMOD Memory-Optimized Multi-Version Concurrency Control for Disk-Based Database Systems, 2022, VLDB Are You Sure You Want to Use MMAP in Your Database Management System?</description></item><item><title>[SIGMOD 2001] Orthogonal Optimization of Subqueries and Aggregation</title><link>https://zz-jason.github.io/posts/sigmod-2001-orthogonal-optimization-of-subqueries-and-aggregation/</link><pubDate>Fri, 25 Nov 2022 13:47:11 +0000</pubDate><guid>https://zz-jason.github.io/posts/sigmod-2001-orthogonal-optimization-of-subqueries-and-aggregation/</guid><description>SQL 优化中，索引选择、Join Reorder、子查询优化是最难处理的几个问题。这是一篇 2001 年发表的经典论文，论文提出了 Apply、Segment</description></item><item><title>[DuckDB] Push-Based Execution Model</title><link>https://zz-jason.github.io/posts/duckdb-push-based-execution-model/</link><pubDate>Mon, 14 Nov 2022 08:36:00 +0800</pubDate><guid>https://zz-jason.github.io/posts/duckdb-push-based-execution-model/</guid><description>1. 背景 DuckDB 是我非常喜欢的一个数据库，它基于 libpg_query 实现了 SQL Parser，语法和 PostgreSQL 一致，内嵌 SQLite 的 REPL CLI，编译好后可直接运行 CLI 交互式输入 SQL 得到结果。架</description></item><item><title>2021 读书总结</title><link>https://zz-jason.github.io/posts/2021-books/</link><pubDate>Fri, 28 Jan 2022 02:41:56 +0000</pubDate><guid>https://zz-jason.github.io/posts/2021-books/</guid><description>一些让人印象深刻的书 今年看的少听的多，发现樊登读书是个不错的平台，能够帮助快速掌握一本书的大致内容，判断是否有值得深度学习的兴趣，于是一口气</description></item><item><title>TiDB 的架构进化之道</title><link>https://zz-jason.github.io/posts/tidb-arch-evolution/</link><pubDate>Fri, 16 Jul 2021 06:17:59 +0000</pubDate><guid>https://zz-jason.github.io/posts/tidb-arch-evolution/</guid><description>整理自《高可用架构》的采访，原文：https://mp.weixin.qq.com/s/7nI_0jmr4Mo6zHzWCvTwpQ 1. 简单介</description></item><item><title>2020 读书总结</title><link>https://zz-jason.github.io/posts/2020-books/</link><pubDate>Wed, 30 Dec 2020 06:54:50 +0800</pubDate><guid>https://zz-jason.github.io/posts/2020-books/</guid><description>2020 年转瞬即逝，过去我可能会看论文比较多，今年稍微有些变化，读书比较多，因此利用这篇文章简单总结下 2020 年阅读过的书籍吧，很多都蛮不错的，后面找时</description></item><item><title>[SIGMOD 1995] A Critique of ANSI SQL Isolation Levels</title><link>https://zz-jason.github.io/posts/sigmod-1995-ansi-sql-isolation-levels/</link><pubDate>Sat, 12 Sep 2020 16:13:29 +0000</pubDate><guid>https://zz-jason.github.io/posts/sigmod-1995-ansi-sql-isolation-levels/</guid><description>前言 最近和朋友聊到事务隔离级别（Isolation Level），发现好多东西记得不牢靠。于是捡起 《A Critique of ANSI SQL Isolation Levels》 重新阅读一把，记</description></item><item><title>[VLDB 2009] Preventing Bad Plans by Bounding the Impact of Cardinality Estimation Errors</title><link>https://zz-jason.github.io/posts/vldb-2009-q-error/</link><pubDate>Mon, 03 Aug 2020 07:06:54 +0000</pubDate><guid>https://zz-jason.github.io/posts/vldb-2009-q-error/</guid><description>整理自 《降低 q-error，避免不优执行计划》</description></item><item><title>TiDB SQL Engine Team：纯手工打磨前沿的优化器和执行引擎｜PingCAP 招聘季</title><link>https://zz-jason.github.io/posts/tidb-sql-engine-team/</link><pubDate>Wed, 25 Mar 2020 06:26:16 +0000</pubDate><guid>https://zz-jason.github.io/posts/tidb-sql-engine-team/</guid><description>“SQL at SCALE”（出自 PingCAP 官网）是我们对 TiDB 的一个精简概括，而我们 TiDB SQL Engine Team 正是负责这 3 个单词中的 “SQL” 部分，其重要性可见一斑。SQL 在</description></item><item><title>重构 EXPLAIN</title><link>https://zz-jason.github.io/posts/refactor-explain/</link><pubDate>Sun, 13 Aug 2017 11:06:51 +0800</pubDate><guid>https://zz-jason.github.io/posts/refactor-explain/</guid><description>explain 的用途非常广泛，比如用来查看某个表的信息，查看执行计划等等。explain 的语法可以参考 mysql 文档：EXPLAIN Syntax，另外 EXPLAIN, DESCRIBE, DESC 这几</description></item><item><title>重构 Projection Elimination</title><link>https://zz-jason.github.io/posts/refactor-projection/</link><pubDate>Sat, 12 Aug 2017 11:03:22 +0800</pubDate><guid>https://zz-jason.github.io/posts/refactor-projection/</guid><description>在 TiDB rc4 版本以前，Projection Elimination 是在 Physical Optimization 阶段完成以后做的。老的 Projection Elimination 只能消除那种做纯拷贝，不交换列的顺序，只改变列的名字的 Project</description></item></channel></rss>